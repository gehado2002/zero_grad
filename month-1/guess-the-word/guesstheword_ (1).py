# -*- coding: utf-8 -*-
"""GuessTheWord .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zc6wckmMIXn7NgKGRzcOlaA1xykgKwG-

## Word Guessing Game Project

### Description:
Create a Python program that simulates a word guessing game with a limited number of trials.

### Objectives:
- Randomly select a word from a list.
- Display the word with guessed letters revealed and unguessed letters as dots.
- Allow the user to guess one letter at a time.
- Limit the number of incorrect guesses the user can make.
- Notify the user if their guess is correct or incorrect.
- End the game when the word is fully guessed or when the user runs out of trials.
- Display a congratulatory message if the word is guessed correctly or a game over message if the trials are exhausted.

### Features:
- **Random Word Selection:**
  - The program will randomly choose a word from a predefined list of words.
- **Word Display:**
  - The program will show the word with guessed letters revealed and the remaining letters as dots (e.g., "p.y.h.n").
- **User Input:**
  - The user will be prompted to enter a single letter in each attempt.
- **Guess Validation:**
  - The program will validate the user's input to ensure it is a single alphabetic character.
  - If the user guesses a letter that has already been guessed, they will be notified and asked to try another letter.
- **Tracking Trials:**
  - The program will keep count of how many incorrect guesses the user has made.
  - The game will end if the user reaches the maximum number of allowed incorrect guesses.
- **Feedback:**
  - The user will be informed if their guess is correct or incorrect.
- **Game Completion:**
  - The game continues until the user successfully guesses all the letters in the word or exhausts the allowed number of incorrect guesses.
  - Once the word is fully guessed, the program will congratulate the user.
  - If the user runs out of trials, the program will display a game over message with the correct word.
"""

colors = ["red", "blue", "yellow", "green","black", "white"]
days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
programming_languages = ["Python", "javaScript", "java", "PHP","Swift"]

def show_categories_menu():

    print("😊 Welcome to Word Guessing Game! 😊\n")

    print("""the categories :
    🌈colors    📅days    🐍programming_languages

    press 1 for colors
    press 2 for days
    press 3 for programming languages""")

import random
def choose_category():
    while True:
        try:
            choosen_category=int(input())
            if choosen_category ==1:
                return random.choice(colors).lower()

                break
            elif choosen_category ==2:
                return random.choice(days).lower()
                break
            elif choosen_category ==3:
                return random.choice(programming_languages).lower()
                break
            else :
                print("❌invalid ")
        except ValueError:
            print("⚠️ Please enter a number.")

def play_guessing_game(random_word):
    guessed_letters = []
    trials=5
    print(f"\n🔡 The hidden word has {len(random_word)} letters.")
    while True:
        guessing_letter = input("Guess the letter: ")

        if not guessing_letter.isalpha() or len(guessing_letter) != 1:
            print("🔠 Please enter a single alphabet letter.")
            continue

        if guessing_letter in guessed_letters:
            print("⛔ You already guessed that letter.")
            continue

        guessed_letters.append(guessing_letter)

        if guessing_letter in random_word:
            print('✅ Correct!\n💪 Keep going!')
        else:
            trials -= 1
            print(f'🥴 Incorrect! You have {trials} trials left.')


        display_incomplete_word = ''
        for letter in random_word:
            if letter in guessed_letters:
                display_incomplete_word += letter
            else:
                display_incomplete_word += '_ '

        print(f"Current word: {display_incomplete_word}")

        if '_' not in display_incomplete_word:
            print("🎉 You guessed the word!")
            break
        if trials == 0:
            print(f"💥 Game Over! The word was: {random_word}")
            break

def ask_play_again():
    try_again = input('Play again? "y/n": ').lower()
    print("*"*30,"\n")
    if try_again == 'y':
        return True
    else:
        print('Goodbye 👋')
        return False

while True:
    show_categories_menu()
    selected_word= choose_category()
    play_guessing_game(selected_word)

    if not ask_play_again():
        break

